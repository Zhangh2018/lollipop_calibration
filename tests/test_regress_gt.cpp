#include <cmath>
#include <cstdio>
#include <vector>
#include "error_models.hpp"

  double gt[] = {
 0.907180, 2.784595, -0.553557, 0.204594,  
 0.544222, 3.272101, -0.553787, 0.204763,
 0.145927, 3.753068, -0.558457, 0.204521,
 0.335686, 2.309878, -0.550399, 0.204717,
-0.171053, 2.885235, -0.552083, 0.204884,
-0.627222, 3.465804, -0.553263, 0.204767,
-0.253724, 1.805474, -0.552467, 0.204643,
-0.733368, 2.187305, -0.552533, 0.205291,
-1.118608, 2.650294, -0.552762, 0.205175,
-1.089497, 2.456717, -0.706028, 0.204528,
-0.589261, 1.871130, -0.705349, 0.204710,
-0.609687, 2.844980, -0.705948, 0.204598,
-0.125849, 2.262945, -0.704355, 0.204768,
-0.160850, 3.213908, -0.705230, 0.204676,
 0.338634, 2.655206, -0.706685, 0.204885,
 0.332593, 3.650021, -0.711328, 0.204849,
 0.827658, 3.059242, -0.707768, 0.204756,
 0.169046, 3.687045, -0.925729, 0.204666,
 0.525852, 3.257887, -0.921442, 0.204662,
 0.910721, 2.777863, -0.921518, 0.204397,
 0.320028, 2.281094, -0.918914, 0.205099,
-0.188946, 2.870565, -0.920403, 0.205067,
-0.658509, 3.464247, -0.921323, 0.205050,
-0.983322, 2.695312, -0.920775, 0.205488,
-0.701211, 2.242894, -0.921805, 0.205717,
-0.334493, 1.766407, -0.922047, 0.205893};

double v[ ] = {-0.345342, 0.2022, 2.68282,
	       0.331537, 0.0307235, 2.96426,
	       0.95023, -0.141394, 3.26637,
	       -0.80506, -0.247296, 3.21917,
	       -0.0230258, -0.513719, 3.61036,
	       0.755014, -0.703375, 3.92964,
	       -1.24009, -0.665034, 3.80244,
	       -0.748981, -0.939325, 4.13729,
	       -0.133518, -1.14061, 4.44923,
	       -0.383972, -0.999522, 4.50596,
	       -1.13687, -0.728612, 4.14294,
	       -0.000892745, -0.652773, 4.06232,
	       -0.793405, -0.404128, 3.70439,
	       0.37453, -0.300629, 3.65283,
	       -0.4144, -0.044202, 3.27964,
	       0.802772, 0.108436, 3.1943,
	       -0.0058042, 0.3536, 2.80834,
	       0.861557, 0.222195, 3.43924,
	       0.279899, 0.394459, 3.17286,
	       -0.371241, 0.56756, 2.88029,
	       -0.868653, 0.103808, 3.44052,
	       -0.0651314, -0.148092, 3.84293,
	       0.757888, -0.361644, 4.16423,
	       -0.12832, -0.693049, 4.51506,
	       -0.730029, -0.567529, 4.30957,
	       -1.3039, -0.3657, 4.05324};

int main(int argc, char** argv)
{
  const int stride  = 4;
  const int num_lmk = sizeof(gt)/sizeof(double)/stride;

  std::vector<int> mask(num_lmk, 1);
  
  // position(3)+quaternion(4)=7 parameters
  double origin[7] = {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0};

  ceres::Problem problem;
  
  for (int i=0, j=0; i< num_lmk; i++)
    {
      if(mask[i])
	{
	  printf("Add [i=%2d]\n", i);
	  ceres::CostFunction* cf = Euclidean3DError::AngleReprojError::Create(v[3*j], v[3*j+1], v[3*j+2]);
	  ceres::LossFunction* lf = NULL;
	  problem.AddResidualBlock(cf, lf, &(origin[3]), &(origin[0]), &gt[i*stride]);
	  ++j;//only increment observation if it exist;
	}
      else
	{
	  printf("Skip [i=%2d]\n",i);
	}
    }
  problem.SetParameterization(&(origin[3]), new ceres::QuaternionParameterization);


  ceres::Solver::Options options;
  options.max_num_iterations = 90;
  options.function_tolerance = 1e-10;
  options.minimizer_progress_to_stdout = true;
  options.linear_solver_type = ceres::DENSE_SCHUR;

  ceres::Solver::Summary summary;
  ceres::Solve(options, &problem, &summary);
  std::cout << summary.FullReport() << std::endl;

  printf("Origin at\n %lf %lf %lf %lf %lf %lf %lf\n", origin[0], origin[1], origin[2], origin[3], origin[4], origin[5], origin[6]);
  return 0;
}
